{"version":3,"sources":["components/Settings/Export/Export.helpers.js"],"names":["pdfMake","vfs","pdfFonts","imageElement","Image","toSnakeCase","str","value","replace","$1","toLowerCase","startsWith","slice","getOBFButtonProps","tile","intl","button","tileExtProps","CBOARD_EXT_PROPERTIES","filter","key","forEach","keyWithPrefix","CBOARD_EXT_PREFIX","label","labelKey","length","formatMessage","id","action","vocalization","borderColor","backgroundColor","getBase64Image","base64Str","split","prefix","base64Data","contentType","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","data","content_type","getDataUri","url","a","axios","method","responseType","result","encodedImage","btoa","reduce","byte","String","fromCharCode","headers","console","error","boardToOBF","boardsMap","board","embed","tiles","obf","images","fetchedImages","grid","Array","Math","ceil","CBOARD_COLUMNS","currentRow","Promise","all","map","push","image","isCordova","search","imageResponse","getCustomImagePath","components","name","nameKey","extension","mime","_","path","imageID","mongoose","Types","ObjectId","toString","undefined","width","height","loadBoard","loadBoardData","buttons","lastGridRowDiff","emptyButtons","concat","format","locale","CBOARD_OBF_CONSTANTS","URL","license","LICENSE","Object","values","sounds","rows","columns","order","description_html","getPDFTileData","toDataURL","styles","outputFormat","resolve","reject","crossOrigin","onload","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","widthFix","heightFix","this","naturalWidth","naturalHeight","drawImage","dataURL","onerror","Error","imageUrl","src","EMPTY_IMAGE","complete","generatePDFBoard","breakPage","header","table","widths","body","layout","pageBreak","prev","fixedRow","imageData","log","message","NOT_FOUND_IMAGE","alignment","labelData","text","displaySettings","getDisplaySettings","value2","labelPosition","LABEL_POSITION_BELOW","value1","LABEL_POSITION_ABOVE","CBOARD_ROWS","emptyCells","fill","getStore","getState","app","getDatetimePrefix","moment","openboardExportAdapter","boardOrBoards","openboardExportManyAdapter","openboardExportOneAdapter","content","Blob","JSON","stringify","type","isAndroid","requestCvaWritePermissions","writeCvaFile","saveAs","boards","boardsLength","boardsForManifest","imagesMap","zip","JSZip","current","boardMapFilename","file","keys","imageFilename","root","manifest","paths","generateAsync","CBOARD_ZIP_OPTIONS","then","EXPORT_CONFIG_BY_TYPE","openboard","filename","getNestedBoards","allBoards","rootBoardId","b","unseen","nestedBoardIds","curr","pop","cboardExportAdapter","jsonData","cboard","navigator","msSaveBlob","link","href","window","createObjectURL","setAttribute","appendChild","click","removeChild","pdfExportAdapter","docDefinition","pageSize","pageOrientation","lastBoardIndex","prevContent","boardPDFData","pdfObj","createPdf","getBuffer","buffer","blob","pdf","download"],"mappings":"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","file":"static/js/3.dae59f85.chunk.js","sourcesContent":["import JSZip from 'jszip';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport { saveAs } from 'file-saver';\r\nimport {\r\n  EXPORT_CONFIG_BY_TYPE,\r\n  CBOARD_OBF_CONSTANTS,\r\n  CBOARD_COLUMNS,\r\n  CBOARD_ROWS,\r\n  CBOARD_EXT_PREFIX,\r\n  CBOARD_EXT_PROPERTIES,\r\n  CBOARD_ZIP_OPTIONS,\r\n  NOT_FOUND_IMAGE,\r\n  EMPTY_IMAGE\r\n} from './Export.constants';\r\nimport {\r\n  LABEL_POSITION_ABOVE,\r\n  LABEL_POSITION_BELOW\r\n} from '../Display/Display.constants';\r\nimport {\r\n  isAndroid,\r\n  isCordova,\r\n  requestCvaWritePermissions,\r\n  writeCvaFile\r\n} from '../../../cordova-util';\r\nimport { getStore } from '../../../store';\r\nimport * as _ from 'lodash';\r\nimport mime from 'mime-types';\r\nimport mongoose from 'mongoose';\r\n\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst imageElement = new Image();\r\n\r\nfunction toSnakeCase(str) {\r\n  const value = str.replace(/([A-Z])/g, $1 => '_' + $1.toLowerCase());\r\n  return value.startsWith('_') ? value.slice(1) : value;\r\n}\r\n\r\nfunction getOBFButtonProps(tile = {}, intl) {\r\n  const button = {};\r\n\r\n  const tileExtProps = CBOARD_EXT_PROPERTIES.filter(key => !!tile[key]);\r\n  tileExtProps.forEach(key => {\r\n    const keyWithPrefix = `${CBOARD_EXT_PREFIX}${toSnakeCase(key)}`;\r\n    button[keyWithPrefix] = tile[key];\r\n  });\r\n\r\n  const label = tile.label || tile.labelKey || '';\r\n  button.label = label.length ? intl.formatMessage({ id: label }) : label;\r\n\r\n  if (tile.action) {\r\n    button.action = tile.action;\r\n  }\r\n\r\n  if (tile.vocalization) {\r\n    button.vocalization = tile.vocalization;\r\n  }\r\n\r\n  if (tile.borderColor) {\r\n    button['border_color'] = tile.borderColor;\r\n  }\r\n\r\n  if (tile.backgroundColor) {\r\n    button['background_color'] = tile.backgroundColor;\r\n  }\r\n\r\n  return button;\r\n}\r\n\r\nfunction getBase64Image(base64Str = '') {\r\n  const [prefix, base64Data] = base64Str.split(',');\r\n  const contentType = prefix.split(':')[1].split(';')[0];\r\n  const byteString = atob(base64Data);\r\n\r\n  // https://gist.github.com/fupslot/5015897\r\n  const ab = new ArrayBuffer(byteString.length);\r\n  const ia = new Uint8Array(ab);\r\n  for (var i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  return {\r\n    ab,\r\n    data: base64Str,\r\n    content_type: contentType\r\n  };\r\n}\r\n\r\nexport async function getDataUri(url) {\r\n  try {\r\n    const result = await axios({\r\n      method: 'get',\r\n      url,\r\n      responseType: 'arraybuffer'\r\n    });\r\n\r\n    // Convert the array buffer to a Base64-encoded string.\r\n    const encodedImage = btoa(\r\n      new Uint8Array(result.data).reduce(\r\n        (data, byte) => data + String.fromCharCode(byte),\r\n        ''\r\n      )\r\n    );\r\n    const contentType = result.headers['content-type'];\r\n\r\n    return {\r\n      ab: result.data,\r\n      content_type: contentType,\r\n      data: `data:${contentType};base64,${encodedImage}`\r\n    };\r\n  } catch (e) {\r\n    console.error(`Failed to get image at ${url}.`, e);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate the contents of an OBF file for a single board, and get the\r\n * associated images.\r\n *\r\n * @param boardsMap A map of boards by id.\r\n * @param board The board to export.\r\n * @param intl\r\n * @param embed Whether or not to embed images directly in the OBF file. Should\r\n *              be true when we're exporting a single board, as we won't generate\r\n *              an OBZ archive.\r\n */\r\n// TODO: Embed sounds as well.\r\nasync function boardToOBF(boardsMap, board = {}, intl, { embed = false }) {\r\n  if (!board.tiles || board.tiles.length < 1) {\r\n    return { obf: null, images: null };\r\n  }\r\n\r\n  const images = {};\r\n  const fetchedImages = {};\r\n  const grid = new Array(Math.ceil(board.tiles.length / CBOARD_COLUMNS));\r\n  let currentRow = 0;\r\n  const buttons = await Promise.all(\r\n    board.tiles.map(async (tile, i) => {\r\n      currentRow =\r\n        i >= (currentRow + 1) * CBOARD_COLUMNS ? currentRow + 1 : currentRow;\r\n\r\n      if (tile) {\r\n        if (grid[currentRow]) {\r\n          grid[currentRow].push(tile.id);\r\n        } else {\r\n          grid[currentRow] = [tile.id];\r\n        }\r\n\r\n        const button = {\r\n          id: tile.id,\r\n          ...getOBFButtonProps(tile, intl)\r\n        };\r\n\r\n        if (tile.image && tile.image.length) {\r\n          // Cordova path cannot be absolute\r\n          const image =\r\n            isCordova() && tile.image && tile.image.search('/') === 0\r\n              ? `.${tile.image}`\r\n              : tile.image;\r\n\r\n          const imageResponse = image.startsWith('data:')\r\n            ? getBase64Image(image)\r\n            : await getDataUri(image);\r\n\r\n          const getCustomImagePath = () => {\r\n            const components = [\r\n              'custom',\r\n              board.name || board.nameKey,\r\n              tile.label || tile.labelKey || tile.id\r\n            ];\r\n            const extension = mime.extension(imageResponse['content_type']);\r\n            return `/${_.join(components, '/')}.${extension}`;\r\n          };\r\n\r\n          const path = image.startsWith('data:')\r\n            ? getCustomImagePath()\r\n            : isCordova()\r\n            ? ''\r\n            : image.startsWith('/')\r\n            ? image\r\n            : `/${image}`;\r\n\r\n          if (imageResponse) {\r\n            const imageID = new mongoose.Types.ObjectId().toString();\r\n            fetchedImages[imageID] = _.defaults({ path }, imageResponse);\r\n            button['image_id'] = imageID;\r\n            images[imageID] = {\r\n              id: imageID,\r\n              // If images are embedded and we're generating a single OBF\r\n              // file, the path is unnecessary.\r\n              path: embed ? undefined : path,\r\n              data: embed ? imageResponse.data : undefined,\r\n              content_type: imageResponse['content_type'],\r\n              width: 300,\r\n              height: 300\r\n            };\r\n          }\r\n        }\r\n\r\n        if (tile.loadBoard && boardsMap[tile.loadBoard]) {\r\n          const loadBoardData = boardsMap[tile.loadBoard];\r\n          button['load_board'] = {\r\n            name: loadBoardData.nameKey\r\n              ? intl.formatMessage({ id: loadBoardData.nameKey })\r\n              : '',\r\n            path: `boards/${tile.loadBoard}.obf`\r\n          };\r\n        }\r\n\r\n        return button;\r\n      }\r\n    })\r\n  );\r\n\r\n  if (grid.length >= 1) {\r\n    const lastGridRowDiff = CBOARD_COLUMNS - grid[grid.length - 1].length;\r\n    if (lastGridRowDiff > 0) {\r\n      const emptyButtons = new Array(lastGridRowDiff).map(() => null);\r\n      grid[grid.length - 1] = grid[grid.length - 1].concat(emptyButtons);\r\n    }\r\n\r\n    const obf = {\r\n      format: 'open-board-0.1',\r\n      id: board.id,\r\n      locale: intl.locale,\r\n      name: board.name,\r\n      url: `${CBOARD_OBF_CONSTANTS.URL}${board.id}`,\r\n      license: CBOARD_OBF_CONSTANTS.LICENSE,\r\n      images: Object.values(images),\r\n      buttons,\r\n      sounds: [],\r\n      grid: {\r\n        rows: grid.length,\r\n        columns: CBOARD_COLUMNS,\r\n        order: grid\r\n      },\r\n      description_html: board.nameKey\r\n        ? intl.formatMessage({ id: board.nameKey })\r\n        : ''\r\n    };\r\n\r\n    const boardExtProps = CBOARD_EXT_PROPERTIES.filter(\r\n      key => typeof board[key] !== 'undefined'\r\n    );\r\n    boardExtProps.forEach(key => {\r\n      const keyWithPrefix = `${CBOARD_EXT_PREFIX}${toSnakeCase(key)}`;\r\n      obf[keyWithPrefix] = board[key];\r\n    });\r\n\r\n    return { obf, images: fetchedImages };\r\n  } else {\r\n    return { obf: null, images: null };\r\n  }\r\n}\r\n\r\nfunction getPDFTileData(tile, intl) {\r\n  const label = tile.label || tile.labelKey || '';\r\n  return {\r\n    label: label.length ? intl.formatMessage({ id: label }) : label,\r\n    image: tile.image || ''\r\n  };\r\n}\r\n\r\nasync function toDataURL(url, styles = {}, outputFormat = 'image/jpeg') {\r\n  return new Promise((resolve, reject) => {\r\n    imageElement.crossOrigin = 'Anonymous';\r\n    imageElement.onload = function() {\r\n      const canvas = document.createElement('CANVAS');\r\n      const ctx = canvas.getContext('2d');\r\n      const backgroundColor = styles.backgroundColor || 'white';\r\n      const borderColor = styles.borderColor || null;\r\n      canvas.height = 150;\r\n      canvas.width = 150;\r\n\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      if (borderColor) {\r\n        ctx.strokeStyle = borderColor;\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n      }\r\n\r\n      let widthFix = 1;\r\n      let heightFix = 1;\r\n      const needToScale = this.naturalWidth > 150 || this.naturalHeight > 150;\r\n      if (needToScale) {\r\n        widthFix = 150 / this.naturalWidth;\r\n        heightFix = 150 / this.naturalHeight;\r\n      }\r\n\r\n      ctx.drawImage(\r\n        this,\r\n        0,\r\n        0,\r\n        this.naturalWidth * widthFix,\r\n        this.naturalHeight * heightFix\r\n      );\r\n\r\n      if (borderColor) {\r\n        ctx.strokeStyle = borderColor;\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeRect(0, 0, 150, 150);\r\n      }\r\n      const dataURL = canvas.toDataURL(outputFormat);\r\n      resolve(dataURL);\r\n    };\r\n    imageElement.onerror = function() {\r\n      reject(new Error('Getting remote image failed'));\r\n    };\r\n    // Cordova path cannot be absolute\r\n    const imageUrl =\r\n      isCordova() && url && url.search('/') === 0 ? `.${url}` : url;\r\n    if (url) {\r\n      imageElement.src = imageUrl;\r\n    } else {\r\n      imageElement.src = EMPTY_IMAGE;\r\n    }\r\n    if (imageElement.complete || imageElement.complete === undefined) {\r\n      if (url) {\r\n        imageElement.src = imageUrl;\r\n      } else {\r\n        imageElement.src = EMPTY_IMAGE;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function generatePDFBoard(board, intl, breakPage = true) {\r\n  const header = board.name || '';\r\n\r\n  const table = {\r\n    table: {\r\n      widths: '16%',\r\n      body: [{}]\r\n    },\r\n    layout: 'noBorders'\r\n  };\r\n\r\n  if (breakPage) {\r\n    table.pageBreak = 'after';\r\n  }\r\n\r\n  if (!board.tiles || !board.tiles.length) {\r\n    return [header, table];\r\n  }\r\n\r\n  // Do a grid with 2n rows\r\n  const grid = new Array(Math.ceil(board.tiles.length / CBOARD_COLUMNS) * 2);\r\n  let currentRow = 0;\r\n\r\n  await board.tiles.reduce(async (prev, tile, i) => {\r\n    // Wait for previous tile\r\n    await prev;\r\n\r\n    const { label, image } = getPDFTileData(tile, intl);\r\n    currentRow =\r\n      i >= (currentRow + 1) * CBOARD_COLUMNS ? currentRow + 1 : currentRow;\r\n    const fixedRow = currentRow * 2;\r\n    let imageData = '';\r\n    let dataURL = image;\r\n    if (!image.startsWith('data:') || image.startsWith('data:image/svg+xml')) {\r\n      let url = image;\r\n      const styles = {};\r\n      if (tile.backgroundColor) {\r\n        styles.backgroundColor = tile.backgroundColor;\r\n      }\r\n      if (tile.borderColor) {\r\n        styles.borderColor = tile.borderColor;\r\n      }\r\n      try {\r\n        dataURL = await toDataURL(url, styles);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        dataURL = NOT_FOUND_IMAGE;\r\n      }\r\n    }\r\n    imageData = {\r\n      image: dataURL,\r\n      alignment: 'center',\r\n      width: '100'\r\n    };\r\n\r\n    const labelData = {\r\n      text: label,\r\n      alignment: 'center'\r\n    };\r\n\r\n    const displaySettings = getDisplaySettings();\r\n    let value1,\r\n      value2 = {};\r\n    if (\r\n      displaySettings.labelPosition &&\r\n      displaySettings.labelPosition === LABEL_POSITION_BELOW\r\n    ) {\r\n      value1 = imageData;\r\n      value2 = labelData;\r\n    } else if (\r\n      displaySettings.labelPosition &&\r\n      displaySettings.labelPosition === LABEL_POSITION_ABOVE\r\n    ) {\r\n      value2 = imageData;\r\n      value1 = labelData;\r\n    } else {\r\n      // Add an empty label to have more vertical space between tiles.\r\n      value1 = { text: ' ' };\r\n      value2 = imageData;\r\n    }\r\n\r\n    // Add a page break when we reach the maximum number of rows on the\r\n    // current page.\r\n    if ((currentRow + 1) % CBOARD_ROWS === 0) {\r\n      value2.pageBreak = 'after';\r\n    }\r\n\r\n    if (grid[fixedRow]) {\r\n      grid[fixedRow].push(value1);\r\n      grid[fixedRow + 1].push(value2);\r\n    } else {\r\n      grid[fixedRow] = [value1];\r\n      grid[fixedRow + 1] = [value2];\r\n    }\r\n\r\n    return grid;\r\n  }, Promise.resolve());\r\n\r\n  const lastGridRowDiff = CBOARD_COLUMNS - grid[grid.length - 2].length; // labels row\r\n  if (lastGridRowDiff > 0) {\r\n    const emptyCells = new Array(lastGridRowDiff).fill('');\r\n    grid[grid.length - 2] = grid[grid.length - 2].concat(emptyCells); // labels\r\n    grid[grid.length - 1] = grid[grid.length - 1].concat(emptyCells); // images\r\n  }\r\n\r\n  table.table.body = grid;\r\n\r\n  return [header, table];\r\n}\r\n\r\nconst getDisplaySettings = () => {\r\n  const store = getStore();\r\n  const {\r\n    app: { displaySettings }\r\n  } = store.getState();\r\n\r\n  return displaySettings;\r\n};\r\n\r\n/**\r\n * Get a filename prefix with the current date and time.\r\n */\r\nconst getDatetimePrefix = () => moment().format('YYYY-MM-DD_HH-mm-ss-');\r\n\r\n/**\r\n * Export one or several boards in the Open Board Format. If we specifically\r\n * want to export a single board, we generate a single OBF file, otherwise\r\n * we generate an OBZ archive.\r\n *\r\n * @param boardOrBoards A board, or an array of boards.\r\n * @param intl\r\n * @returns {Promise<void>} Nothing.\r\n */\r\nexport async function openboardExportAdapter(boardOrBoards, intl) {\r\n  return _.isArray(boardOrBoards)\r\n    ? openboardExportManyAdapter(boardOrBoards, intl)\r\n    : openboardExportOneAdapter(boardOrBoards, intl);\r\n}\r\n\r\nexport async function openboardExportOneAdapter(board, intl) {\r\n  const { obf } = await boardToOBF({ [board.id]: board }, board, intl, {\r\n    embed: true\r\n  });\r\n  const content = new Blob([JSON.stringify(obf, null, 2)], {\r\n    type: 'application/json'\r\n  });\r\n\r\n  if (content) {\r\n    // TODO: Remove illegal characters from the board name.\r\n    const prefix = getDatetimePrefix() + board.name + ' ';\r\n    if (isAndroid()) {\r\n      requestCvaWritePermissions();\r\n      writeCvaFile('Download/' + prefix + 'board.obf', content);\r\n    } else {\r\n      saveAs(content, prefix + 'board.obf');\r\n    }\r\n  }\r\n}\r\n\r\nexport async function openboardExportManyAdapter(boards = [], intl) {\r\n  const boardsLength = boards.length;\r\n  const boardsForManifest = {};\r\n  const imagesMap = {};\r\n  const zip = new JSZip();\r\n\r\n  const boardsMap = boards.reduce((prev, current) => {\r\n    prev[current.id] = current;\r\n    return prev;\r\n  }, {});\r\n\r\n  for (let i = 0; i < boardsLength; i++) {\r\n    const board = boards[i];\r\n    const boardMapFilename = `boards/${board.id}.obf`;\r\n    const { obf, images } = await boardToOBF(boardsMap, board, intl, {\r\n      embed: false\r\n    });\r\n\r\n    if (!obf) {\r\n      continue;\r\n    }\r\n\r\n    zip.file(boardMapFilename, JSON.stringify(obf, null, 2));\r\n\r\n    const imagesKeys = Object.keys(images);\r\n    imagesKeys.forEach(key => {\r\n      const image = images[key];\r\n      const imageFilename = `images/${image.path}`;\r\n      zip.file(imageFilename, image.ab);\r\n      imagesMap[key] = imageFilename;\r\n    });\r\n\r\n    boardsForManifest[board.id] = boardMapFilename;\r\n  }\r\n\r\n  const root = boardsForManifest.root\r\n    ? boardsForManifest.root\r\n    : boardsForManifest[Object.keys(boardsMap)[0]];\r\n\r\n  const manifest = {\r\n    format: 'open-board-0.1',\r\n    root,\r\n    paths: {\r\n      boards: boardsForManifest,\r\n      images: imagesMap\r\n    }\r\n  };\r\n\r\n  zip.file('manifest.json', JSON.stringify(manifest, null, 2));\r\n\r\n  zip.generateAsync(CBOARD_ZIP_OPTIONS).then(content => {\r\n    if (content) {\r\n      let prefix = getDatetimePrefix();\r\n      if (boards.length === 1) {\r\n        prefix = prefix + boards[0].name + ' ';\r\n      } else {\r\n        prefix = prefix + 'boardsset ';\r\n      }\r\n      if (isAndroid()) {\r\n        requestCvaWritePermissions();\r\n        const name =\r\n          'Download/' + prefix + EXPORT_CONFIG_BY_TYPE.openboard.filename;\r\n        writeCvaFile(name, content);\r\n      } else {\r\n        saveAs(content, prefix + EXPORT_CONFIG_BY_TYPE.openboard.filename);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * For a given board, get the board and its subfolders. For example,\r\n * for the following structure and the root board A:\r\n *\r\n *     A\r\n *    / \\\r\n *   B  C\r\n *     / \\\r\n *    D   E\r\n *\r\n * The output should contain boards A, B, C, D, and E.\r\n *\r\n * @param allBoards An array of boards.\r\n * @param rootBoardId The id of the \"main\" board that we want to export.\r\n * @returns {Array<Object>} The board and its subfolders.\r\n */\r\nfunction getNestedBoards(allBoards, rootBoardId) {\r\n  const boardsMap = _.fromPairs(_.map(allBoards, b => [b.id, b]));\r\n\r\n  const unseen = [rootBoardId];\r\n  const nestedBoardIds = [rootBoardId];\r\n\r\n  while (!_.isEmpty(unseen)) {\r\n    const curr = unseen.pop();\r\n    const tiles = _.get(boardsMap[curr], 'tiles');\r\n    _.forEach(tiles, tile => {\r\n      const id = tile.loadBoard;\r\n      // The second check is necessary to handle cycles (for example,\r\n      // A -> B -> A).\r\n      if (id && !_.includes(nestedBoardIds, id)) {\r\n        nestedBoardIds.push(id);\r\n        unseen.push(id);\r\n      }\r\n    });\r\n  }\r\n\r\n  return _.map(nestedBoardIds, id => boardsMap[id]);\r\n}\r\n\r\nexport async function cboardExportAdapter(allBoards = [], board) {\r\n  const boards = board ? getNestedBoards(allBoards, board.id) : allBoards;\r\n\r\n  const jsonData = new Blob([JSON.stringify(boards)], {\r\n    type: 'text/json;charset=utf-8;'\r\n  });\r\n\r\n  if (jsonData) {\r\n    let prefix = getDatetimePrefix();\r\n    if (boards.length === 1) {\r\n      prefix = prefix + boards[0].name + ' ';\r\n    } else {\r\n      prefix = prefix + 'boardsset ';\r\n    }\r\n    if (isAndroid()) {\r\n      requestCvaWritePermissions();\r\n      const name = 'Download/' + prefix + EXPORT_CONFIG_BY_TYPE.cboard.filename;\r\n      writeCvaFile(name, jsonData);\r\n    }\r\n    // TODO: Can we use `saveAs` here, like in the other adapters?\r\n    // IE11 & Edge\r\n    if (navigator.msSaveBlob) {\r\n      navigator.msSaveBlob(\r\n        jsonData,\r\n        prefix + EXPORT_CONFIG_BY_TYPE.cboard.filename\r\n      );\r\n    } else {\r\n      // In FF link must be added to DOM to be clicked\r\n      const link = document.createElement('a');\r\n      link.href = window.URL.createObjectURL(jsonData);\r\n      link.setAttribute(\r\n        'download',\r\n        prefix + EXPORT_CONFIG_BY_TYPE.cboard.filename\r\n      );\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function pdfExportAdapter(boards = [], intl) {\r\n  const docDefinition = {\r\n    pageSize: 'A4',\r\n    pageOrientation: 'landscape',\r\n    content: []\r\n  };\r\n  const lastBoardIndex = boards.length - 1;\r\n  const content = await boards.reduce(async (prev, board, i) => {\r\n    const prevContent = await prev;\r\n    const breakPage = i !== lastBoardIndex;\r\n    const boardPDFData = await generatePDFBoard(board, intl, breakPage);\r\n    return prevContent.concat(boardPDFData);\r\n  }, Promise.resolve([]));\r\n\r\n  docDefinition.content = content;\r\n  const pdfObj = pdfMake.createPdf(docDefinition);\r\n\r\n  if (pdfObj) {\r\n    let prefix = getDatetimePrefix();\r\n    if (content.length === 2) {\r\n      prefix = prefix + content[0] + ' ';\r\n    } else {\r\n      prefix = prefix + 'boardsset ';\r\n    }\r\n    if (isAndroid()) {\r\n      requestCvaWritePermissions();\r\n      pdfObj.getBuffer(buffer => {\r\n        var blob = new Blob([buffer], { type: 'application/pdf' });\r\n        const name = 'Download/' + prefix + EXPORT_CONFIG_BY_TYPE.pdf.filename;\r\n        writeCvaFile(name, blob);\r\n      });\r\n    } else {\r\n      // On a browser simply use download!\r\n      pdfObj.download(prefix + EXPORT_CONFIG_BY_TYPE.pdf.filename);\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  openboardExportAdapter,\r\n  cboardExportAdapter,\r\n  pdfExportAdapter\r\n};\r\n"],"sourceRoot":""}